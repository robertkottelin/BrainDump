{"version":3,"sources":["components/Navbar.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","target","rel","id","this","props","account","width","height","src","concat","Identicon","toString","Component","Main","_this","role","style","maxWidth","onSubmit","event","preventDefault","data","dataContent","value","setData","type","ref","input","placeholder","required","datamapping","map","key","author","window","web3","utils","fromWei","tipAmount","name","onClick","toWei","console","log","payPatient","posts","post","content","tipPost","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","socialNetwork","postCount","infoCount","info","loading","createPost","bind","assertThisInitialized","setInfo","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","net","getId","networkId","SocialNetwork","networks","Contract","abi","methods","dataCount","i","toConsumableArray","p","sort","b","_this2","send","from","on","_receipt","location","reload","_this3","_this4","_this5","_this6","components_Navbar","components_Main","Boolean","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8f348a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\n\r\nclass Navbar extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          BrainDump\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n            <small className=\"text-secondary\">\r\n              <small id=\"account\">Your Account: {this.props.account}</small>\r\n            </small>\r\n            { this.props.account\r\n              ? <img\r\n                className='ml-2'\r\n                width='30'\r\n                height='30'\r\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\r\n              />\r\n              : <span></span>\r\n            }\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\n\r\nclass Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid mt-5\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\r\n            <div className=\"content mr-auto ml-auto mx-auto\" style={{ width: '100%' }}>\r\n                <form onSubmit={(event) => {\r\n                  event.preventDefault()\r\n                  const data = this.dataContent.value\r\n                  this.props.setData(data)\r\n                }}>\r\n                <p>&nbsp;</p>\r\n                <div className=\"form-group mr-sm-2\">\r\n                  <input\r\n                    id=\"dataContent\"\r\n                    type=\"text\"\r\n                    ref={(input) => { this.dataContent = input }}\r\n                    className=\"form-control\"\r\n                    placeholder=\"Dump thought here\"\r\n                    required />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Dump</button>            \r\n              </form>\r\n              <p>&nbsp;</p>\r\n              { this.props.datamapping.map((data, key) => {\r\n                return(\r\n                  <div className=\"card justify center mx-auto\" style={{ width: '100%' }} key={key} >\r\n                    <div className=\"card-header\">\r\n                      <img\r\n                        className='mr-2'\r\n                        width='30'\r\n                        height='30'\r\n                        src={`data:image/png;base64,${new Identicon(data.author, 30).toString()}`}\r\n                      />\r\n                      <small className=\"text-muted\">Author: {data.author}</small>\r\n                    </div>\r\n                    <ul id=\"postList\" className=\"list-group list-group-flush\">\r\n                      <li className=\"list-group-item\">\r\n                        <p>{data.dataContent}</p>\r\n                      </li>\r\n                      <li key={key} className=\"list-group-item py-2\">\r\n                        <small className=\"float-left mt-1 text-muted\">\r\n                          TIPS: {window.web3.utils.fromWei(data.tipAmount.toString(), 'Ether')} ETH\r\n                        </small>\r\n                        <button\r\n                          className=\"btn btn-link btn-sm float-right pt-0\"\r\n                          name={data.id}\r\n                          onClick={(event) => {\r\n                            let tipAmount = window.web3.utils.toWei('0.1', 'Ether')\r\n                            console.log(event.target.name, tipAmount)\r\n                            this.props.payPatient(event.target.name, tipAmount)\r\n                          }}\r\n                        >\r\n                          0.1 ETH\r\n                        </button>\r\n                        <button\r\n                          className=\"btn btn-link btn-sm float-right pt-0\"\r\n                          name={data.id}\r\n                          onClick={(event) => {\r\n                            let tipAmount = window.web3.utils.toWei('0.01', 'Ether')\r\n                            console.log(event.target.name, tipAmount)\r\n                            this.props.payPatient(event.target.name, tipAmount)\r\n                          }}\r\n                        >\r\n                          0.01 ETH\r\n                        </button> \r\n                        <button\r\n                          className=\"btn btn-link btn-sm float-right pt-0\"\r\n                          name={data.id}\r\n                          onClick={(event) => {\r\n                            let tipAmount = window.web3.utils.toWei('0.001', 'Ether')\r\n                            console.log(event.target.name, tipAmount)\r\n                            this.props.payPatient(event.target.name, tipAmount)\r\n                          }}\r\n                        >\r\n                          Tip Post 0.001 ETH\r\n                        </button>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                )\r\n              })}\r\n              { this.props.posts.map((post, key) => {\r\n                return(\r\n                  <div className=\"card mb-4\" key={key} >\r\n                    <div className=\"card-header\">\r\n                      <img\r\n                        className='mr-2'\r\n                        width='30'\r\n                        height='30'\r\n                        src={`data:image/png;base64,${new Identicon(post.author, 30).toString()}`}\r\n                      />\r\n                      <small className=\"text-muted\">{post.author}</small>\r\n                    </div>\r\n                    <ul id=\"postList\" className=\"list-group list-group-flush\">\r\n                      <li className=\"list-group-item\">\r\n                        <p>{post.content}</p>\r\n                      </li>\r\n                      <li key={key} className=\"list-group-item py-2\">\r\n                        <small className=\"float-left mt-1 text-muted\">\r\n                          TIPS: {window.web3.utils.fromWei(post.tipAmount.toString(), 'Ether')} ETH\r\n                        </small>\r\n                        <button\r\n                          className=\"btn btn-link btn-sm float-right pt-0\"\r\n                          name={post.id}\r\n                          onClick={(event) => {\r\n                            let tipAmount = window.web3.utils.toWei('0.1', 'Ether')\r\n                            console.log(event.target.name, tipAmount)\r\n                            this.props.tipPost(event.target.name, tipAmount)\r\n                          }}\r\n                        >\r\n                          TIP 0.1 ETH\r\n                        </button>\r\n                      </li>\r\n                    </ul>\r\n                  </div>\r\n                )\r\n              })}\r\n              <p>&nbsp;</p>\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport Web3 from 'web3';\r\nimport Identicon from 'identicon.js';\r\nimport './App.css';\r\nimport SocialNetwork from '../abis/SocialNetwork.json'\r\nimport InputData from '../abis/InputData.json'\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    // Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n    // Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = SocialNetwork.networks[networkId]\r\n    if(networkData) {\r\n      const socialNetwork = new web3.eth.Contract(SocialNetwork.abi, '0x4446AF4FC865A3c2337C4D0cB3107Ca523902BbC')\r\n      this.setState({ socialNetwork })\r\n      const postCount = await socialNetwork.methods.postCount().call()\r\n      const infoCount = await socialNetwork.methods.infoCount().call()\r\n      const dataCount = await socialNetwork.methods.dataCount().call()\r\n      this.setState({ postCount })\r\n      this.setState({ dataCount })\r\n      // Load Posts\r\n      for (var i = 1; i <= postCount; i++) {\r\n        const post = await socialNetwork.methods.posts(i).call()\r\n        this.setState({\r\n          posts: [...this.state.posts, post]\r\n        })\r\n      }\r\n      \r\n      for (var p = 1; p <= dataCount; p++) {\r\n        const data = await socialNetwork.methods.datamapping(p).call()\r\n        this.setState({\r\n          datamapping: [...this.state.datamapping, data]\r\n        })\r\n      }\r\n\r\n      console.log({ datamapping: this.state.datamapping})\r\n      \r\n      //Load Info\r\n      const info = await socialNetwork.methods.info().call()\r\n      this.setState({ info })\r\n      \r\n      //Sort data\r\n      this.setState({\r\n        datamapping: this.state.datamapping.sort((a,b) => b.tipAmount - a.tipAmount )\r\n      })\r\n      this.setState({ loading: false})\r\n    } else {\r\n      window.alert('SocialNetwork contract not deployed to detected network.')\r\n    }\r\n  }\r\n\r\n  setInfo(info) {\r\n    this.setState({ loading: true })\r\n    this.state.socialNetwork.methods.setInfo(info).send({ from: this.state.account })\r\n    .on('receipt', (_receipt) => {\r\n      this.setState({ loading: false })\r\n      window.location.reload(false);\r\n    })\r\n  }\r\n\r\n  setData(data) {\r\n    this.setState({ loading: true })\r\n    this.state.socialNetwork.methods.setData(data).send({ from: this.state.account })\r\n    .on('receipt', (_receipt) => {\r\n      this.setState({ loading: false })\r\n      window.location.reload(false);\r\n    })\r\n    \r\n  }\r\n\r\n\r\n  createPost(content) {\r\n    this.setState({ loading: true })\r\n    this.state.socialNetwork.methods.createPost(content).send({ from: this.state.account })\r\n    .on('receipt', (_receipt) => {\r\n      this.setState({ loading: false })\r\n      window.location.reload(false);\r\n    })\r\n    \r\n  }\r\n\r\n  tipPost(id, tipAmount) {\r\n    this.setState({ loading: true })\r\n    this.state.socialNetwork.methods.tipPost(id).send({ from: this.state.account, value: tipAmount })\r\n    .on('receipt', (_receipt) => {\r\n      this.setState({ loading: false })\r\n      window.location.reload(false);\r\n    })\r\n  }\r\n\r\n  payPatient(id, tipAmount) {\r\n    this.setState({ loading: true })\r\n    this.state.socialNetwork.methods.payPatient(id).send({ from: this.state.account, value: tipAmount })\r\n    .on('receipt', (_receipt) => {\r\n      this.setState({ loading: false })\r\n      window.location.reload(false);\r\n    })\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '',\r\n      socialNetwork: null,\r\n      postCount: 0,\r\n      infoCount: 0,\r\n      posts: [],\r\n      info: '',\r\n      datamapping: [],\r\n      loading: true\r\n    }\r\n\r\n    this.createPost = this.createPost.bind(this)\r\n    this.tipPost = this.tipPost.bind(this)\r\n    this.setInfo = this.setInfo.bind(this)\r\n    this.setData = this.setData.bind(this)\r\n    this.payPatient = this.payPatient.bind(this)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <Main\r\n              posts={this.state.posts}\r\n              //createPost={this.createPost}\r\n              //tipPost={this.tipPost}\r\n              //setInfo={this.setInfo}\r\n              setData={this.setData}\r\n              payPatient={this.payPatient}\r\n              datamapping = {this.state.datamapping}\r\n            />\r\n        }\r\n\r\n\r\n        \r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}